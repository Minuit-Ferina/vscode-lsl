// Generated from LSLLexer.g4 by ANTLR 4.13.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class LSLLexer extends Lexer {
	public static readonly Integer = 1;
	public static readonly Float = 2;
	public static readonly String = 3;
	public static readonly Key = 4;
	public static readonly Vector = 5;
	public static readonly Quaternion = 6;
	public static readonly Rotation = 7;
	public static readonly List = 8;
	public static readonly StateDefault = 9;
	public static readonly State = 10;
	public static readonly Event = 11;
	public static readonly Jump = 12;
	public static readonly Return = 13;
	public static readonly If = 14;
	public static readonly Else = 15;
	public static readonly For = 16;
	public static readonly Do = 17;
	public static readonly While = 18;
	public static readonly Print = 19;
	public static readonly Dot = 20;
	public static readonly IntegerTrue = 21;
	public static readonly IntegerFalse = 22;
	public static readonly ZeroVector = 23;
	public static readonly ZeroRotation = 24;
	public static readonly TouchInvalidVector = 25;
	public static readonly TouchInvalidTexcoord = 26;
	public static readonly PlusPlus = 27;
	public static readonly MinusMinus = 28;
	public static readonly PlusAssign = 29;
	public static readonly MinusAssign = 30;
	public static readonly StarAssign = 31;
	public static readonly DivAssign = 32;
	public static readonly ModAssign = 33;
	public static readonly Semi = 34;
	public static readonly Comma = 35;
	public static readonly Assign = 36;
	public static readonly LeftParen = 37;
	public static readonly RightParen = 38;
	public static readonly LeftBracket = 39;
	public static readonly RightBracket = 40;
	public static readonly LeftBrace = 41;
	public static readonly RightBrace = 42;
	public static readonly Plus = 43;
	public static readonly Minus = 44;
	public static readonly Asterisk = 45;
	public static readonly At = 46;
	public static readonly Greater = 47;
	public static readonly Less = 48;
	public static readonly EQ = 49;
	public static readonly NEQ = 50;
	public static readonly GreaterEqual = 51;
	public static readonly LessEqual = 52;
	public static readonly And = 53;
	public static readonly Or = 54;
	public static readonly Caret = 55;
	public static readonly Tilde = 56;
	public static readonly Not = 57;
	public static readonly AndAnd = 58;
	public static readonly OrOr = 59;
	public static readonly LeftShift = 60;
	public static readonly RightShift = 61;
	public static readonly StringConstant = 62;
	public static readonly Slash = 63;
	public static readonly Mod = 64;
	public static readonly HexIntegerLiteral = 65;
	public static readonly BinaryIntegerLiteral = 66;
	public static readonly StringLiteral = 67;
	public static readonly FloatingConstant = 68;
	public static readonly DigitSequence = 69;
	public static readonly MultiLineMacro = 70;
	public static readonly Directive = 71;
	public static readonly Whitespace = 72;
	public static readonly Newline = 73;
	public static readonly BlockComment = 74;
	public static readonly LineComment = 75;
	public static readonly Identifier = 76;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", 
                                                                                      "WHITESPACE_CHANNEL", 
                                                                                      "COMMENTS_CHANNEL" ];
	public static readonly literalNames: (string | null)[] = [ null, "'integer'", 
                                                            "'float'", "'string'", 
                                                            "'key'", "'vector'", 
                                                            "'quaternion'", 
                                                            "'rotation'", 
                                                            "'list'", "'default'", 
                                                            "'state'", "'event'", 
                                                            "'jump'", "'return'", 
                                                            "'if'", "'else'", 
                                                            "'for'", "'do'", 
                                                            "'while'", "'print'", 
                                                            "'.'", "'TRUE'", 
                                                            "'FALSE'", "'ZERO_Vector'", 
                                                            "'ZERO_ROTATION'", 
                                                            "'TOUCH_INVALID_Vector'", 
                                                            "'TOUCH_INVALID_TEXCOORD'", 
                                                            "'++'", "'--'", 
                                                            "'+='", "'-='", 
                                                            "'*='", "'/='", 
                                                            "'%='", "';'", 
                                                            "','", "'='", 
                                                            "'('", "')'", 
                                                            "'['", "']'", 
                                                            "'{'", "'}'", 
                                                            "'+'", "'-'", 
                                                            "'*'", "'@'", 
                                                            "'>'", "'<'", 
                                                            "'=='", "'!='", 
                                                            "'>='", "'<='", 
                                                            "'&'", "'|'", 
                                                            "'^'", "'~'", 
                                                            "'!'", "'&&'", 
                                                            "'||'", "'<<'", 
                                                            "'>>'", null, 
                                                            "'/'", "'%'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "Integer", 
                                                             "Float", "String", 
                                                             "Key", "Vector", 
                                                             "Quaternion", 
                                                             "Rotation", 
                                                             "List", "StateDefault", 
                                                             "State", "Event", 
                                                             "Jump", "Return", 
                                                             "If", "Else", 
                                                             "For", "Do", 
                                                             "While", "Print", 
                                                             "Dot", "IntegerTrue", 
                                                             "IntegerFalse", 
                                                             "ZeroVector", 
                                                             "ZeroRotation", 
                                                             "TouchInvalidVector", 
                                                             "TouchInvalidTexcoord", 
                                                             "PlusPlus", 
                                                             "MinusMinus", 
                                                             "PlusAssign", 
                                                             "MinusAssign", 
                                                             "StarAssign", 
                                                             "DivAssign", 
                                                             "ModAssign", 
                                                             "Semi", "Comma", 
                                                             "Assign", "LeftParen", 
                                                             "RightParen", 
                                                             "LeftBracket", 
                                                             "RightBracket", 
                                                             "LeftBrace", 
                                                             "RightBrace", 
                                                             "Plus", "Minus", 
                                                             "Asterisk", 
                                                             "At", "Greater", 
                                                             "Less", "EQ", 
                                                             "NEQ", "GreaterEqual", 
                                                             "LessEqual", 
                                                             "And", "Or", 
                                                             "Caret", "Tilde", 
                                                             "Not", "AndAnd", 
                                                             "OrOr", "LeftShift", 
                                                             "RightShift", 
                                                             "StringConstant", 
                                                             "Slash", "Mod", 
                                                             "HexIntegerLiteral", 
                                                             "BinaryIntegerLiteral", 
                                                             "StringLiteral", 
                                                             "FloatingConstant", 
                                                             "DigitSequence", 
                                                             "MultiLineMacro", 
                                                             "Directive", 
                                                             "Whitespace", 
                                                             "Newline", 
                                                             "BlockComment", 
                                                             "LineComment", 
                                                             "Identifier" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"Integer", "Float", "String", "Key", "Vector", "Quaternion", "Rotation", 
		"List", "StateDefault", "State", "Event", "Jump", "Return", "If", "Else", 
		"For", "Do", "While", "Print", "Dot", "IntegerTrue", "IntegerFalse", "ZeroVector", 
		"ZeroRotation", "TouchInvalidVector", "TouchInvalidTexcoord", "PlusPlus", 
		"MinusMinus", "PlusAssign", "MinusAssign", "StarAssign", "DivAssign", 
		"ModAssign", "Semi", "Comma", "Assign", "LeftParen", "RightParen", "LeftBracket", 
		"RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", "Asterisk", 
		"At", "Greater", "Less", "EQ", "NEQ", "GreaterEqual", "LessEqual", "And", 
		"Or", "Caret", "Tilde", "Not", "AndAnd", "OrOr", "LeftShift", "RightShift", 
		"StringConstant", "Slash", "Mod", "HexIntegerLiteral", "BinaryIntegerLiteral", 
		"StringLiteral", "HexDigit", "DoubleStringCharacter", "SingleStringCharacter", 
		"LineContinuation", "EscapeSequence", "CharacterEscapeSequence", "SingleEscapeCharacter", 
		"HexEscapeSequence", "NonEscapeCharacter", "IdentifierNondigit", "Nondigit", 
		"HexadecimalConstant", "HexadecimalPrefix", "HexadecimalDigit", "BinaryConstant", 
		"DecimalConstant", "NonzeroDigit", "FloatingConstant", "HexadecimalDigitSequence", 
		"DecimalFloatingConstant", "FractionalConstant", "ExponentPart", "Sign", 
		"DigitSequence", "Digit", "FloatingSuffix", "MultiLineMacro", "Directive", 
		"Whitespace", "Newline", "BlockComment", "LineComment", "Identifier",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, LSLLexer._ATN, LSLLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "LSLLexer.g4"; }

	public get literalNames(): (string | null)[] { return LSLLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return LSLLexer.symbolicNames; }
	public get ruleNames(): string[] { return LSLLexer.ruleNames; }

	public get serializedATN(): number[] { return LSLLexer._serializedATN; }

	public get channelNames(): string[] { return LSLLexer.channelNames; }

	public get modeNames(): string[] { return LSLLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,76,728,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,
	2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,
	89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,
	7,96,2,97,7,97,2,98,7,98,2,99,7,99,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
	1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,
	1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
	1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
	1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
	1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
	14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
	1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,
	20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
	1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
	23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
	25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
	1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,
	29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,
	1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,
	42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,
	1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,
	54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,
	1,60,1,60,1,61,1,61,5,61,488,8,61,10,61,12,61,491,9,61,1,61,1,61,1,62,1,
	62,1,63,1,63,1,64,1,64,1,64,1,64,5,64,503,8,64,10,64,12,64,506,9,64,1,65,
	1,65,5,65,510,8,65,10,65,12,65,513,9,65,1,65,1,65,1,66,1,66,5,66,519,8,
	66,10,66,12,66,522,9,66,1,66,1,66,1,66,5,66,527,8,66,10,66,12,66,530,9,
	66,1,66,3,66,533,8,66,1,67,1,67,1,68,1,68,1,68,1,68,3,68,541,8,68,1,69,
	1,69,1,69,1,69,3,69,547,8,69,1,70,1,70,1,70,1,71,1,71,1,71,3,71,555,8,71,
	1,72,1,72,3,72,559,8,72,1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,75,1,76,1,
	76,1,77,1,77,1,78,1,78,4,78,575,8,78,11,78,12,78,576,1,79,1,79,1,79,1,80,
	1,80,1,81,1,81,1,81,4,81,587,8,81,11,81,12,81,588,1,82,1,82,5,82,593,8,
	82,10,82,12,82,596,9,82,1,83,1,83,1,84,1,84,1,85,4,85,603,8,85,11,85,12,
	85,604,1,86,1,86,3,86,609,8,86,1,86,3,86,612,8,86,1,86,1,86,1,86,3,86,617,
	8,86,3,86,619,8,86,1,87,3,87,622,8,87,1,87,1,87,1,87,1,87,1,87,3,87,629,
	8,87,1,88,1,88,3,88,633,8,88,1,88,1,88,1,89,1,89,1,90,4,90,640,8,90,11,
	90,12,90,641,1,91,1,91,1,92,1,92,1,93,1,93,5,93,650,8,93,10,93,12,93,653,
	9,93,1,93,1,93,3,93,657,8,93,1,93,4,93,660,8,93,11,93,12,93,661,1,93,4,
	93,665,8,93,11,93,12,93,666,1,93,1,93,1,94,1,94,5,94,673,8,94,10,94,12,
	94,676,9,94,1,94,1,94,1,95,4,95,681,8,95,11,95,12,95,682,1,95,1,95,1,96,
	1,96,3,96,689,8,96,1,96,3,96,692,8,96,1,96,1,96,1,97,1,97,1,97,1,97,5,97,
	700,8,97,10,97,12,97,703,9,97,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,
	98,5,98,714,8,98,10,98,12,98,717,9,98,1,98,1,98,1,99,1,99,1,99,5,99,724,
	8,99,10,99,12,99,727,9,99,3,489,651,701,0,100,1,1,3,2,5,3,7,4,9,5,11,6,
	13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
	19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
	31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
	43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
	109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,
	65,131,66,133,67,135,0,137,0,139,0,141,0,143,0,145,0,147,0,149,0,151,0,
	153,0,155,0,157,0,159,0,161,0,163,0,165,0,167,0,169,68,171,0,173,0,175,
	0,177,0,179,0,181,69,183,0,185,0,187,70,189,71,191,72,193,73,195,74,197,
	75,199,76,1,0,20,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,49,2,0,
	48,49,95,95,2,0,66,66,98,98,4,0,48,57,65,70,95,95,97,102,4,0,10,10,13,13,
	34,34,92,92,4,0,10,10,13,13,39,39,92,92,3,0,10,10,13,13,8232,8233,9,0,34,
	34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,118,118,12,0,10,10,
	13,13,34,34,39,39,48,57,92,92,98,98,102,102,110,110,114,114,116,118,120,
	120,3,0,65,90,95,95,97,122,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,
	1,0,48,57,4,0,70,70,76,76,102,102,108,108,1,0,10,10,2,0,9,9,32,32,2,0,10,
	10,13,13,740,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
	0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
	0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
	1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
	0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
	0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
	1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
	0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
	0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,
	119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,
	1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,169,1,0,0,0,0,181,1,0,0,0,0,187,1,
	0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,
	0,0,0,199,1,0,0,0,1,201,1,0,0,0,3,209,1,0,0,0,5,215,1,0,0,0,7,222,1,0,0,
	0,9,226,1,0,0,0,11,233,1,0,0,0,13,244,1,0,0,0,15,253,1,0,0,0,17,258,1,0,
	0,0,19,266,1,0,0,0,21,272,1,0,0,0,23,278,1,0,0,0,25,283,1,0,0,0,27,290,
	1,0,0,0,29,293,1,0,0,0,31,298,1,0,0,0,33,302,1,0,0,0,35,305,1,0,0,0,37,
	311,1,0,0,0,39,317,1,0,0,0,41,319,1,0,0,0,43,324,1,0,0,0,45,330,1,0,0,0,
	47,342,1,0,0,0,49,356,1,0,0,0,51,377,1,0,0,0,53,400,1,0,0,0,55,403,1,0,
	0,0,57,406,1,0,0,0,59,409,1,0,0,0,61,412,1,0,0,0,63,415,1,0,0,0,65,418,
	1,0,0,0,67,421,1,0,0,0,69,423,1,0,0,0,71,425,1,0,0,0,73,427,1,0,0,0,75,
	429,1,0,0,0,77,431,1,0,0,0,79,433,1,0,0,0,81,435,1,0,0,0,83,437,1,0,0,0,
	85,439,1,0,0,0,87,441,1,0,0,0,89,443,1,0,0,0,91,445,1,0,0,0,93,447,1,0,
	0,0,95,449,1,0,0,0,97,451,1,0,0,0,99,454,1,0,0,0,101,457,1,0,0,0,103,460,
	1,0,0,0,105,463,1,0,0,0,107,465,1,0,0,0,109,467,1,0,0,0,111,469,1,0,0,0,
	113,471,1,0,0,0,115,473,1,0,0,0,117,476,1,0,0,0,119,479,1,0,0,0,121,482,
	1,0,0,0,123,485,1,0,0,0,125,494,1,0,0,0,127,496,1,0,0,0,129,498,1,0,0,0,
	131,507,1,0,0,0,133,532,1,0,0,0,135,534,1,0,0,0,137,540,1,0,0,0,139,546,
	1,0,0,0,141,548,1,0,0,0,143,554,1,0,0,0,145,558,1,0,0,0,147,560,1,0,0,0,
	149,562,1,0,0,0,151,566,1,0,0,0,153,568,1,0,0,0,155,570,1,0,0,0,157,572,
	1,0,0,0,159,578,1,0,0,0,161,581,1,0,0,0,163,583,1,0,0,0,165,590,1,0,0,0,
	167,597,1,0,0,0,169,599,1,0,0,0,171,602,1,0,0,0,173,618,1,0,0,0,175,628,
	1,0,0,0,177,630,1,0,0,0,179,636,1,0,0,0,181,639,1,0,0,0,183,643,1,0,0,0,
	185,645,1,0,0,0,187,647,1,0,0,0,189,670,1,0,0,0,191,680,1,0,0,0,193,691,
	1,0,0,0,195,695,1,0,0,0,197,709,1,0,0,0,199,720,1,0,0,0,201,202,5,105,0,
	0,202,203,5,110,0,0,203,204,5,116,0,0,204,205,5,101,0,0,205,206,5,103,0,
	0,206,207,5,101,0,0,207,208,5,114,0,0,208,2,1,0,0,0,209,210,5,102,0,0,210,
	211,5,108,0,0,211,212,5,111,0,0,212,213,5,97,0,0,213,214,5,116,0,0,214,
	4,1,0,0,0,215,216,5,115,0,0,216,217,5,116,0,0,217,218,5,114,0,0,218,219,
	5,105,0,0,219,220,5,110,0,0,220,221,5,103,0,0,221,6,1,0,0,0,222,223,5,107,
	0,0,223,224,5,101,0,0,224,225,5,121,0,0,225,8,1,0,0,0,226,227,5,118,0,0,
	227,228,5,101,0,0,228,229,5,99,0,0,229,230,5,116,0,0,230,231,5,111,0,0,
	231,232,5,114,0,0,232,10,1,0,0,0,233,234,5,113,0,0,234,235,5,117,0,0,235,
	236,5,97,0,0,236,237,5,116,0,0,237,238,5,101,0,0,238,239,5,114,0,0,239,
	240,5,110,0,0,240,241,5,105,0,0,241,242,5,111,0,0,242,243,5,110,0,0,243,
	12,1,0,0,0,244,245,5,114,0,0,245,246,5,111,0,0,246,247,5,116,0,0,247,248,
	5,97,0,0,248,249,5,116,0,0,249,250,5,105,0,0,250,251,5,111,0,0,251,252,
	5,110,0,0,252,14,1,0,0,0,253,254,5,108,0,0,254,255,5,105,0,0,255,256,5,
	115,0,0,256,257,5,116,0,0,257,16,1,0,0,0,258,259,5,100,0,0,259,260,5,101,
	0,0,260,261,5,102,0,0,261,262,5,97,0,0,262,263,5,117,0,0,263,264,5,108,
	0,0,264,265,5,116,0,0,265,18,1,0,0,0,266,267,5,115,0,0,267,268,5,116,0,
	0,268,269,5,97,0,0,269,270,5,116,0,0,270,271,5,101,0,0,271,20,1,0,0,0,272,
	273,5,101,0,0,273,274,5,118,0,0,274,275,5,101,0,0,275,276,5,110,0,0,276,
	277,5,116,0,0,277,22,1,0,0,0,278,279,5,106,0,0,279,280,5,117,0,0,280,281,
	5,109,0,0,281,282,5,112,0,0,282,24,1,0,0,0,283,284,5,114,0,0,284,285,5,
	101,0,0,285,286,5,116,0,0,286,287,5,117,0,0,287,288,5,114,0,0,288,289,5,
	110,0,0,289,26,1,0,0,0,290,291,5,105,0,0,291,292,5,102,0,0,292,28,1,0,0,
	0,293,294,5,101,0,0,294,295,5,108,0,0,295,296,5,115,0,0,296,297,5,101,0,
	0,297,30,1,0,0,0,298,299,5,102,0,0,299,300,5,111,0,0,300,301,5,114,0,0,
	301,32,1,0,0,0,302,303,5,100,0,0,303,304,5,111,0,0,304,34,1,0,0,0,305,306,
	5,119,0,0,306,307,5,104,0,0,307,308,5,105,0,0,308,309,5,108,0,0,309,310,
	5,101,0,0,310,36,1,0,0,0,311,312,5,112,0,0,312,313,5,114,0,0,313,314,5,
	105,0,0,314,315,5,110,0,0,315,316,5,116,0,0,316,38,1,0,0,0,317,318,5,46,
	0,0,318,40,1,0,0,0,319,320,5,84,0,0,320,321,5,82,0,0,321,322,5,85,0,0,322,
	323,5,69,0,0,323,42,1,0,0,0,324,325,5,70,0,0,325,326,5,65,0,0,326,327,5,
	76,0,0,327,328,5,83,0,0,328,329,5,69,0,0,329,44,1,0,0,0,330,331,5,90,0,
	0,331,332,5,69,0,0,332,333,5,82,0,0,333,334,5,79,0,0,334,335,5,95,0,0,335,
	336,5,86,0,0,336,337,5,101,0,0,337,338,5,99,0,0,338,339,5,116,0,0,339,340,
	5,111,0,0,340,341,5,114,0,0,341,46,1,0,0,0,342,343,5,90,0,0,343,344,5,69,
	0,0,344,345,5,82,0,0,345,346,5,79,0,0,346,347,5,95,0,0,347,348,5,82,0,0,
	348,349,5,79,0,0,349,350,5,84,0,0,350,351,5,65,0,0,351,352,5,84,0,0,352,
	353,5,73,0,0,353,354,5,79,0,0,354,355,5,78,0,0,355,48,1,0,0,0,356,357,5,
	84,0,0,357,358,5,79,0,0,358,359,5,85,0,0,359,360,5,67,0,0,360,361,5,72,
	0,0,361,362,5,95,0,0,362,363,5,73,0,0,363,364,5,78,0,0,364,365,5,86,0,0,
	365,366,5,65,0,0,366,367,5,76,0,0,367,368,5,73,0,0,368,369,5,68,0,0,369,
	370,5,95,0,0,370,371,5,86,0,0,371,372,5,101,0,0,372,373,5,99,0,0,373,374,
	5,116,0,0,374,375,5,111,0,0,375,376,5,114,0,0,376,50,1,0,0,0,377,378,5,
	84,0,0,378,379,5,79,0,0,379,380,5,85,0,0,380,381,5,67,0,0,381,382,5,72,
	0,0,382,383,5,95,0,0,383,384,5,73,0,0,384,385,5,78,0,0,385,386,5,86,0,0,
	386,387,5,65,0,0,387,388,5,76,0,0,388,389,5,73,0,0,389,390,5,68,0,0,390,
	391,5,95,0,0,391,392,5,84,0,0,392,393,5,69,0,0,393,394,5,88,0,0,394,395,
	5,67,0,0,395,396,5,79,0,0,396,397,5,79,0,0,397,398,5,82,0,0,398,399,5,68,
	0,0,399,52,1,0,0,0,400,401,5,43,0,0,401,402,5,43,0,0,402,54,1,0,0,0,403,
	404,5,45,0,0,404,405,5,45,0,0,405,56,1,0,0,0,406,407,5,43,0,0,407,408,5,
	61,0,0,408,58,1,0,0,0,409,410,5,45,0,0,410,411,5,61,0,0,411,60,1,0,0,0,
	412,413,5,42,0,0,413,414,5,61,0,0,414,62,1,0,0,0,415,416,5,47,0,0,416,417,
	5,61,0,0,417,64,1,0,0,0,418,419,5,37,0,0,419,420,5,61,0,0,420,66,1,0,0,
	0,421,422,5,59,0,0,422,68,1,0,0,0,423,424,5,44,0,0,424,70,1,0,0,0,425,426,
	5,61,0,0,426,72,1,0,0,0,427,428,5,40,0,0,428,74,1,0,0,0,429,430,5,41,0,
	0,430,76,1,0,0,0,431,432,5,91,0,0,432,78,1,0,0,0,433,434,5,93,0,0,434,80,
	1,0,0,0,435,436,5,123,0,0,436,82,1,0,0,0,437,438,5,125,0,0,438,84,1,0,0,
	0,439,440,5,43,0,0,440,86,1,0,0,0,441,442,5,45,0,0,442,88,1,0,0,0,443,444,
	5,42,0,0,444,90,1,0,0,0,445,446,5,64,0,0,446,92,1,0,0,0,447,448,5,62,0,
	0,448,94,1,0,0,0,449,450,5,60,0,0,450,96,1,0,0,0,451,452,5,61,0,0,452,453,
	5,61,0,0,453,98,1,0,0,0,454,455,5,33,0,0,455,456,5,61,0,0,456,100,1,0,0,
	0,457,458,5,62,0,0,458,459,5,61,0,0,459,102,1,0,0,0,460,461,5,60,0,0,461,
	462,5,61,0,0,462,104,1,0,0,0,463,464,5,38,0,0,464,106,1,0,0,0,465,466,5,
	124,0,0,466,108,1,0,0,0,467,468,5,94,0,0,468,110,1,0,0,0,469,470,5,126,
	0,0,470,112,1,0,0,0,471,472,5,33,0,0,472,114,1,0,0,0,473,474,5,38,0,0,474,
	475,5,38,0,0,475,116,1,0,0,0,476,477,5,124,0,0,477,478,5,124,0,0,478,118,
	1,0,0,0,479,480,5,60,0,0,480,481,5,60,0,0,481,120,1,0,0,0,482,483,5,62,
	0,0,483,484,5,62,0,0,484,122,1,0,0,0,485,489,5,34,0,0,486,488,9,0,0,0,487,
	486,1,0,0,0,488,491,1,0,0,0,489,490,1,0,0,0,489,487,1,0,0,0,490,492,1,0,
	0,0,491,489,1,0,0,0,492,493,5,34,0,0,493,124,1,0,0,0,494,495,5,47,0,0,495,
	126,1,0,0,0,496,497,5,37,0,0,497,128,1,0,0,0,498,499,5,48,0,0,499,500,7,
	0,0,0,500,504,7,1,0,0,501,503,3,135,67,0,502,501,1,0,0,0,503,506,1,0,0,
	0,504,502,1,0,0,0,504,505,1,0,0,0,505,130,1,0,0,0,506,504,1,0,0,0,507,511,
	7,2,0,0,508,510,7,3,0,0,509,508,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,
	511,512,1,0,0,0,512,514,1,0,0,0,513,511,1,0,0,0,514,515,7,4,0,0,515,132,
	1,0,0,0,516,520,5,34,0,0,517,519,3,137,68,0,518,517,1,0,0,0,519,522,1,0,
	0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,523,1,0,0,0,522,520,1,0,0,0,523,
	533,5,34,0,0,524,528,5,39,0,0,525,527,3,139,69,0,526,525,1,0,0,0,527,530,
	1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,0,
	531,533,5,39,0,0,532,516,1,0,0,0,532,524,1,0,0,0,533,134,1,0,0,0,534,535,
	7,5,0,0,535,136,1,0,0,0,536,541,8,6,0,0,537,538,5,92,0,0,538,541,3,143,
	71,0,539,541,3,141,70,0,540,536,1,0,0,0,540,537,1,0,0,0,540,539,1,0,0,0,
	541,138,1,0,0,0,542,547,8,7,0,0,543,544,5,92,0,0,544,547,3,143,71,0,545,
	547,3,141,70,0,546,542,1,0,0,0,546,543,1,0,0,0,546,545,1,0,0,0,547,140,
	1,0,0,0,548,549,5,92,0,0,549,550,7,8,0,0,550,142,1,0,0,0,551,555,3,145,
	72,0,552,555,5,48,0,0,553,555,3,149,74,0,554,551,1,0,0,0,554,552,1,0,0,
	0,554,553,1,0,0,0,555,144,1,0,0,0,556,559,3,147,73,0,557,559,3,151,75,0,
	558,556,1,0,0,0,558,557,1,0,0,0,559,146,1,0,0,0,560,561,7,9,0,0,561,148,
	1,0,0,0,562,563,5,120,0,0,563,564,3,135,67,0,564,565,3,135,67,0,565,150,
	1,0,0,0,566,567,8,10,0,0,567,152,1,0,0,0,568,569,3,155,77,0,569,154,1,0,
	0,0,570,571,7,11,0,0,571,156,1,0,0,0,572,574,3,159,79,0,573,575,3,161,80,
	0,574,573,1,0,0,0,575,576,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,158,
	1,0,0,0,578,579,5,48,0,0,579,580,7,0,0,0,580,160,1,0,0,0,581,582,7,1,0,
	0,582,162,1,0,0,0,583,584,5,48,0,0,584,586,7,4,0,0,585,587,7,2,0,0,586,
	585,1,0,0,0,587,588,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,164,1,0,
	0,0,590,594,3,167,83,0,591,593,3,183,91,0,592,591,1,0,0,0,593,596,1,0,0,
	0,594,592,1,0,0,0,594,595,1,0,0,0,595,166,1,0,0,0,596,594,1,0,0,0,597,598,
	7,12,0,0,598,168,1,0,0,0,599,600,3,173,86,0,600,170,1,0,0,0,601,603,3,161,
	80,0,602,601,1,0,0,0,603,604,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,
	172,1,0,0,0,606,608,3,175,87,0,607,609,3,177,88,0,608,607,1,0,0,0,608,609,
	1,0,0,0,609,611,1,0,0,0,610,612,3,185,92,0,611,610,1,0,0,0,611,612,1,0,
	0,0,612,619,1,0,0,0,613,614,3,181,90,0,614,616,3,177,88,0,615,617,3,185,
	92,0,616,615,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,0,618,606,1,0,0,0,618,
	613,1,0,0,0,619,174,1,0,0,0,620,622,3,181,90,0,621,620,1,0,0,0,621,622,
	1,0,0,0,622,623,1,0,0,0,623,624,5,46,0,0,624,629,3,181,90,0,625,626,3,181,
	90,0,626,627,5,46,0,0,627,629,1,0,0,0,628,621,1,0,0,0,628,625,1,0,0,0,629,
	176,1,0,0,0,630,632,7,13,0,0,631,633,3,179,89,0,632,631,1,0,0,0,632,633,
	1,0,0,0,633,634,1,0,0,0,634,635,3,181,90,0,635,178,1,0,0,0,636,637,7,14,
	0,0,637,180,1,0,0,0,638,640,3,183,91,0,639,638,1,0,0,0,640,641,1,0,0,0,
	641,639,1,0,0,0,641,642,1,0,0,0,642,182,1,0,0,0,643,644,7,15,0,0,644,184,
	1,0,0,0,645,646,7,16,0,0,646,186,1,0,0,0,647,659,5,35,0,0,648,650,8,17,
	0,0,649,648,1,0,0,0,650,653,1,0,0,0,651,652,1,0,0,0,651,649,1,0,0,0,652,
	654,1,0,0,0,653,651,1,0,0,0,654,656,5,92,0,0,655,657,5,13,0,0,656,655,1,
	0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,660,5,10,0,0,659,651,1,0,0,0,
	660,661,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,664,1,0,0,0,663,665,
	8,17,0,0,664,663,1,0,0,0,665,666,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,
	0,667,668,1,0,0,0,668,669,6,93,0,0,669,188,1,0,0,0,670,674,5,35,0,0,671,
	673,8,17,0,0,672,671,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,
	0,0,0,675,677,1,0,0,0,676,674,1,0,0,0,677,678,6,94,0,0,678,190,1,0,0,0,
	679,681,7,18,0,0,680,679,1,0,0,0,681,682,1,0,0,0,682,680,1,0,0,0,682,683,
	1,0,0,0,683,684,1,0,0,0,684,685,6,95,1,0,685,192,1,0,0,0,686,688,5,13,0,
	0,687,689,5,10,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,692,1,0,0,0,690,
	692,5,10,0,0,691,686,1,0,0,0,691,690,1,0,0,0,692,693,1,0,0,0,693,694,6,
	96,1,0,694,194,1,0,0,0,695,696,5,47,0,0,696,697,5,42,0,0,697,701,1,0,0,
	0,698,700,9,0,0,0,699,698,1,0,0,0,700,703,1,0,0,0,701,702,1,0,0,0,701,699,
	1,0,0,0,702,704,1,0,0,0,703,701,1,0,0,0,704,705,5,42,0,0,705,706,5,47,0,
	0,706,707,1,0,0,0,707,708,6,97,2,0,708,196,1,0,0,0,709,710,5,47,0,0,710,
	711,5,47,0,0,711,715,1,0,0,0,712,714,8,19,0,0,713,712,1,0,0,0,714,717,1,
	0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,0,717,715,1,0,0,0,718,
	719,6,98,2,0,719,198,1,0,0,0,720,725,3,153,76,0,721,724,3,153,76,0,722,
	724,3,183,91,0,723,721,1,0,0,0,723,722,1,0,0,0,724,727,1,0,0,0,725,723,
	1,0,0,0,725,726,1,0,0,0,726,200,1,0,0,0,727,725,1,0,0,0,35,0,489,504,511,
	520,528,532,540,546,554,558,576,588,594,604,608,611,616,618,621,628,632,
	641,651,656,661,666,674,682,688,691,701,715,723,725,3,0,1,0,6,0,0,0,3,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LSLLexer.__ATN) {
			LSLLexer.__ATN = new ATNDeserializer().deserialize(LSLLexer._serializedATN);
		}

		return LSLLexer.__ATN;
	}


	static DecisionsToDFA = LSLLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}